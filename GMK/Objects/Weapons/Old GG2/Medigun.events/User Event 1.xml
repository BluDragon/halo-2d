<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<event category="OTHER" id="11">
  <actions>
    <action id="603" library="1">
      <!--action name: Code-->
      <kind>CODE</kind>
      <allowRelative>false</allowRelative>
      <question>false</question>
      <canApplyTo>true</canApplyTo>
      <actionType>CODE</actionType>
      <functionName/>
      <relative>false</relative>
      <not>false</not>
      <appliesTo>.self</appliesTo>
      <arguments>
        <argument kind="STRING">{
    if(!instance_exists(healTarget) and readyToShoot) {
        var bestTarget, bestTargetDist;
        bestTarget=noone;
        bestTargetDist=maxHealDistance;

        with(Character) {
            if(id != other.owner and team == other.owner.team) {
                if(point_distance(x,y,other.x,other.y)&lt;=bestTargetDist) {
                    if(collision_line(other.x, other.y, other.x+lengthdir_x(other.maxHealDistance, other.owner.aimDirection), other.y+lengthdir_y(other.maxHealDistance, other.owner.aimDirection), id, true, false)) {
                        if(!collision_line(other.x, other.y, x, y, Obstacle, true, true)) {
                            bestTargetDist = point_distance(x,y,other.x,other.y);
                            bestTarget = player;
                        }
                    }
                }
            }
        }

        healTarget = bestTarget;
        readyToShoot=false;
        alarm[0]=1;
    }
    
    if(instance_exists(healTarget)) {
        if(healTarget.object != -1) {
            if(point_distance(x,y,healTarget.object.x, healTarget.object.y)&lt;=maxHealDistance) {
                if(collision_line(x,y, healTarget.object.x, healTarget.object.y, Obstacle, true, true)&lt;0) {
                    healedThisStep = true;
                    
                    if (healTarget.object.healer == -1)
                        healTarget.object.healer = ownerPlayer;
                    if (healTarget.object.burnDuration &gt; 0)
                        healTarget.object.burnDuration -= 1;
                    var healthGained;
                    healthGained = healAmount * calculateHealingFactor(healTarget.object.timeUnscathed);
                    healTarget.object.hp = min(healTarget.object.hp + healthGained, healTarget.object.maxHp);
                    hphealed += healthGained;
                    ownerPlayer.stats[HEALING] += healthGained;
                    ownerPlayer.roundStats[HEALING] += healthGained;
                    
                    
                    if(ubering == false &amp;&amp; uberCharge&lt;2000){
                        uberCharge+=1;
                        var setup;
                        setup = false;
                        if instance_exists(ControlPointSetupGate) {
                            if (ControlPointSetupGate.solid)
                                setup = true;
                        }
                        if(healTarget.object.hp &lt; healTarget.object.maxHp or setup) uberCharge += 0.5;
                        if(healTarget.object.hp &lt; healTarget.object.maxHp/2 or setup) uberCharge += 1;
                        if(uberCharge &gt;= 2000) {
                            uberCharge = 2000;
                            if(global.isHost) {
                                sendEventUberReady(ownerPlayer);
                                doEventUberReady(ownerPlayer);
                            }
                        }
                    } else if(ubering == true){
                        if healTarget.object.ubered == 0 playsound(x,y,global.UberStartSnd);
                        healTarget.object.ubered = 1;
                        healTarget.object.alarm[2] = 3; 
                    }
                                                               
                    if hphealed &gt;= HP_PER_POINT {
                        ownerPlayer.stats[POINTS] += 1;
                        ownerPlayer.roundStats[POINTS] += 1;
                        hphealed -= HP_PER_POINT;
                    }

                    if(alarm[3]&lt;=0) {
                        mediLoop = loopsoundstart(x,y,global.MedigunSnd);
                    } else {
                        loopsoundmaintain(x,y,mediLoop);
                    }
                    alarm[3]=2;
                    
                    /* MOD CODE */
                    // if the target is the user, reset eligiblity for Stop Drop Go
                    if (global.myself == healTarget) {
                        AchievementController.stopDropGoOkay = false;
                    }
                    /* END MOD CODE */
                } else {
                    healTarget.object.healer = -1;
                    healTarget = noone;
                }
            } else {
                healTarget.object.healer = -1;
                healTarget = noone;
            }
        } else {
            healTarget = noone;
        }
    }
}
</argument>
      </arguments>
    </action>
  </actions>
</event>
