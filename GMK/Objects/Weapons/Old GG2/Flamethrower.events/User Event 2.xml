<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<event category="OTHER" id="12">
  <actions>
    <action id="603" library="1">
      <!--action name: Code-->
      <kind>CODE</kind>
      <allowRelative>false</allowRelative>
      <question>false</question>
      <canApplyTo>true</canApplyTo>
      <actionType>CODE</actionType>
      <functionName/>
      <relative>false</relative>
      <not>false</not>
      <appliesTo>.self</appliesTo>
      <arguments>
        <argument kind="STRING">{
    if (readyToBlast &amp;&amp; ammoCount &gt;= 40)
    {
        //Base
        playsound(x,y,global.CompressionBlastSnd);
        poof = instance_create(x+lengthdir_x(25,owner.aimDirection),y+lengthdir_y(25,owner.aimDirection),AirBlastO);
        if image_xscale == 1
        {
            poof.image_xscale = 1;
            poof.image_angle = owner.aimDirection;
        }
        else
        {
            poof.image_xscale = -1;
            poof.image_angle = owner.aimDirection+180;
        }
        poof.owner = owner;
        with(poof)
            motion_add(owner.direction, owner.speed);
        
        var shot;
        //Flare
        if (owner.keyState &amp; $10 and ammoCount &gt;= 75 and readyToFlare)
        {
            if !collision_line(x,y,x+lengthdir_x(28,owner.aimDirection),y+lengthdir_y(28,owner.aimDirection),Obstacle,1,0)
                and !place_meeting(x+lengthdir_x(25,owner.aimDirection),y+lengthdir_y(25,owner.aimDirection),TeamGate)
            {
                shot = instance_create(x+lengthdir_x(25,owner.aimDirection),y+lengthdir_y(25,owner.aimDirection),Flare);
                shot.direction=owner.aimDirection;
                shot.speed=15;
                shot.owner=owner;
                shot.ownerPlayer=ownerPlayer;
                shot.team=owner.team;
                shot.weapon=WEAPON_FLARE;
                
                // use the grenade tossing animation
                alarm[9] = 12;
                tossed = true;
                sprite_index = FlamethrowerNoHandS;
                playsound(x, y, global.GrenadeTossSnd);
                // hide the poof
                poof.sprite_index = -1;
                
                justShot=true;
                readyToFlare=false;
                ammoCount -= 35;
                alarm[2] = flareReloadTime;
            }
        }
            
        //Reflects
        with(Rocket)
        {
            if(ownerPlayer.team != other.owner.team)
            {
                dir = point_direction(other.x, other.y, x, y);
                dist = point_distance(other.x, other.y, x, y);
                angle = abs((dir-other.owner.aimDirection)+720) mod 360;
                if collision_circle(x,y,5,other.poof,false,true)
                {
                    ownerPlayer = other.ownerPlayer;
                    team = other.owner.team;
                    weapon = WEAPON_REFLECTED_ROCKET;
                    hitDamage = 25;
                    explosionDamage = 30;
                    knockback = 8;
                    alarm[0] = 200;
                    alarm[1] = 40;
                    alarm[2] = 80;
                    motion_set(other.owner.aimDirection, speed);
                }
            }
        }
        with(Flare)
        {
            if(ownerPlayer.team != other.owner.team)
            {
                dir = point_direction(other.x, other.y, x, y);
                dist = point_distance(other.x, other.y, x, y);
                angle = abs((dir-other.owner.aimDirection)+720) mod 360;
                if collision_circle(x,y,5,other.poof,false,true)
                {
                    ownerPlayer = other.ownerPlayer;
                    team = other.owner.team;
                    weapon = WEAPON_REFLECTED_FLARE;
                    alarm[0]=40;
                    
                    motion_set(other.owner.aimDirection, speed);
                }
            }
        }
        
        with(Mine)
        {
            if(ownerPlayer.team != other.owner.team)
            {
                dir = point_direction(other.x, other.y, x, y);
                dist = point_distance(other.x, other.y, x, y);
                angle = abs((dir-other.owner.aimDirection)+720) mod 360;
                if collision_circle(x,y,5,other.poof,false,true)
                {
                    motion_set(other.owner.aimDirection, max(speed, other.blastStrength / 3));
                    reflector = other.ownerPlayer;
                    if (stickied)
                    {
                        var dx, dy, l;
                        speed *= 0.65;
                        dy = (place_meeting(x,y-3,Obstacle) &gt; 0);
                        dy -= (place_meeting(x,y+3,Obstacle) &gt; 0);
                        dx = (place_meeting(x-3,y,Obstacle) &gt; 0);
                        dx -= (place_meeting(x+3,y,Obstacle) &gt; 0);
                        l = sqrt(dx*dx+dy*dy);
                        if(l&gt;0)
                        {
                            var normalspeed;
                            dx /= l;
                            dy /= l;
                            normalspeed = dx*hspeed + dy*vspeed;
                            if(normalspeed &lt; 0)
                            {
                                hspeed -= 2*normalspeed*dx;
                                vspeed -= 2*normalspeed*dy;
                            }
                        }
                        stickied = false;
                    }
                }
            }
        }
        
        //Shoves
        with(Character)
        {
                dir = point_direction(other.x, other.y, x, y);
                dist = point_distance(other.x, other.y, x, y);
                angle = abs((dir-other.owner.aimDirection)+720) mod 360;
                if collision_circle(x,y,25,other.poof,false,true) {
                    if(team != other.owner.team)
                    {
                        motion_add(other.owner.aimDirection, other.characterBlastStrength*(1-dist/other.blastDistance));
                        vspeed -= 2;
                        moveStatus = 3;
                        if (lastDamageDealer != other.ownerPlayer &amp;&amp; lastDamageDealer != player)
                        {
                            secondToLastDamageDealer = lastDamageDealer;
                            alarm[4] = alarm[3];
                        }
                        alarm[3] = ASSIST_TIME;
                        lastDamageDealer = other.ownerPlayer;
                        lastDamageSource = -1;
                    } 
                    else if (burnIntensity &gt; 0 || burnDuration &gt; 0)
                    {
                        burnIntensity = 0;
                        burnDuration = 0;
                        burnedBy = -1;
                        afterburnSource = -1;
                    }
            }
        }
        
        with(LooseSheet)
        {
            dir = point_direction(other.x, other.y, x, y);
            dist = point_distance(other.x, other.y, x, y);
            angle = abs((dir-other.owner.aimDirection)+720) mod 360;
            if collision_circle(x,y,25,other.poof,false,true)
            {
                motion_add(other.owner.aimDirection, other.blastStrength*(1-dist/other.blastDistance) );
            }
        }
        
        with(Gib)
        {
            dir = point_direction(other.x, other.y, x, y);
            dist = point_distance(other.x, other.y, x, y);
            angle = abs((dir-other.owner.aimDirection)+720) mod 360;
            if collision_circle(x,y,25,other.poof,false,true)
            {
                motion_add(other.owner.aimDirection, other.blastStrength*(1-dist/other.blastDistance) );
            }
        }
        
        //Finish
        justBlast = true;
        readyToBlast=false;
        readyToShoot=false;
        alarm[5]=blastReloadTime;
        isRefilling = false;
        alarm[1]=blastReloadTime;
        alarm[0]=blastNoFlameTime;
        ammoCount -= 40;
    }
}
</argument>
      </arguments>
    </action>
  </actions>
</event>
