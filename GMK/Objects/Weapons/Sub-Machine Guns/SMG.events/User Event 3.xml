<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<event category="OTHER" id="13">
  <actions>
    <action id="603" library="1">
      <!--action name: Code-->
      <kind>CODE</kind>
      <allowRelative>false</allowRelative>
      <question>false</question>
      <canApplyTo>true</canApplyTo>
      <actionType>CODE</actionType>
      <functionName/>
      <relative>false</relative>
      <not>false</not>
      <appliesTo>.self</appliesTo>
      <arguments>
        <argument kind="STRING">{
    ammoCount = max(0, ammoCount - 1);
    playsound(x, y, global.SMGSnd);
    
    justShot = true;
    readyToShoot = false;
    alarm[0] = refireTime;
    
    var shot, theta, shotJitter, uCAP;
    
    // angle stuff
    theta = image_angle;
    uCAP = false;
    if (image_xscale &lt; 0) theta -= 180;
    
    // call the macro to calculate the shot point
    weaponShotPoint();
    // then do the up-close and personal check
    hitscanCollision(x, y, theta, point_distance(x, y, shotx, shoty));
    // if a victim was found spawn the projectiles directly on their body
    if (hitType == Character) {
        shotx = hitID.x;
        shoty = hitID.y;
        uCAP = true;
    } else if (hitType == Helmet) {
        shotx = hitID.owner.x;
        shoty = hitID.owner.y;
        uCAP = true;
    }
        
    // spawn the single pellet
    shotJitter = (random(9) - 4.5) * Iif(owner.dualWielding, global.dualWieldSpreadFactor, 1);
    muzzleJitter = shotJitter;
    shot = instance_create(shotx, shoty, Pellet);
    shot.damage = damage * Iif(owner.dualWielding, global.dualWieldDamageFactor, 1);
    shot.shieldDamage = damage * Iif(owner.dualWielding, global.dualWieldDamageFactor, 1);
    shot.direction = owner.aimDirection + shotJitter;
    if (uCAP) {
        shot.speed = 0;
        shot.lifetime = 2;
    } else {
        shot.speed = 16 + random(3);
        shot.lifetime = 17 + irandom(2);
    }
    shot.alarm[0] = shot.lifetime;
    shot.owner = owner;
    shot.ownerPlayer = ownerPlayer;
    shot.team = owner.team;
    shot.weaponType = WEAPON_SMG;
    
    // increase spread
    if (muzzleSpreadInc) muzzleSpread = min(muzzleSpread + muzzleSpreadStep, muzzleSpreadMax);
    
    // muzzle jump -- each client does its own muzzle jump, and the angle of the mouse is synced each frame via INPUT_STATE
    if (ownerPlayer == global.myself) addMuzzleJump(muzzleJump);
}

</argument>
      </arguments>
    </action>
  </actions>
</event>
