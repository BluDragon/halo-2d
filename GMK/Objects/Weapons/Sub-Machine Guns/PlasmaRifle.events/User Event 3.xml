<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<event category="OTHER" id="13">
  <actions>
    <action id="603" library="1">
      <!--action name: Code-->
      <kind>CODE</kind>
      <allowRelative>false</allowRelative>
      <question>false</question>
      <canApplyTo>true</canApplyTo>
      <actionType>CODE</actionType>
      <functionName/>
      <relative>false</relative>
      <not>false</not>
      <appliesTo>.self</appliesTo>
      <arguments>
        <argument kind="STRING">{
    var bolt, theta, uCAP;
    
    ammoCount = max(0, ammoCount - 1);
    
    justShot = true;
    readyToShoot = false;
    alarm[0] = refireTime;
    
    // angle stuff
        theta = image_angle;
    uCAP = false;
    if (image_xscale &lt; 0) theta -= 180;
    
    // call the macro to calculate the shot point
    weaponShotPoint();
    // then do the up-close and personal check
    hitscanCollision(x, y, theta, point_distance(x, y, shotx, shoty));
    // if a victim was found spawn the projectiles directly on their body
    if (hitType == Character) {
        shotx = hitID.x;
        shoty = hitID.y;
        uCAP = true;
    } else if (hitType == Helmet) {
        shotx = hitID.owner.x;
        shoty = hitID.owner.y;
        uCAP = true;
    }
    
    // heat up
    heat = min(heat + 7, maxHeat);
    // play a normal shot sound
    playsound(x, y, global.PlasmaRifleSnd);
    
    // spawn a normal plasma bolt
    bolt = instance_create(shotx, shoty, PlasmaRifleBolt);
    bolt.damage = damage * Iif(owner.dualWielding, global.dualWieldDamageFactor, 1);
    bolt.shieldDamage = shieldDamage * Iif(owner.dualWielding, global.dualWieldDamageFactor, 1);
    bolt.damageBleeds = damageBleeds;
    bolt.direction = owner.aimDirection + (2 - random(4)) * Iif(owner.dualWielding, global.dualWieldSpreadFactor, 1);
    if (uCAP) {
        bolt.speed = 0;
        bolt.lifetime = 2;
    } else {
        bolt.speed = 17;
        bolt.lifetime = ceil(maxRange / bolt.speed);
    }
    bolt.alarm[0] = bolt.lifetime;
    bolt.owner = owner;
    bolt.ownerPlayer = ownerPlayer;
    bolt.team = owner.team;
    bolt.weaponType = weaponType;
    
    // if the heat is now maxed out, play the cooldown sound
    if (heat &gt;= maxHeat) {
        playsound(x, y, global.PlasmaRifleCooldownSnd);
        overheated = true;
        alarm[10] = maxHeat;    // animate the cooldown
        // if this is the player, do the ammo warning cooldown flash for as long as it needs to cool down
        if (ownerPlayer == global.myself) ammoWarningCheck(id, owner.weapons[2] == id, true, heat, true);
    }
    
    // reverse the sign of the shot offset
    flashOffset = -flashOffset;
    flashSize = 0.2 + random(0.15);
    sparkRand = irandom(27);
    sparkSize = 0.7 + random(0.2);
}
</argument>
      </arguments>
    </action>
  </actions>
</event>
