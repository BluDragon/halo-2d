<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<event category="STEP" id="2">
  <actions>
    <action id="603" library="1">
      <!--action name: Code-->
      <kind>CODE</kind>
      <allowRelative>false</allowRelative>
      <question>false</question>
      <canApplyTo>true</canApplyTo>
      <actionType>CODE</actionType>
      <functionName/>
      <relative>false</relative>
      <not>false</not>
      <appliesTo>.self</appliesTo>
      <arguments>
        <argument kind="STRING">// Plasma Rifle particle effects
{
    var px, py, pos, tick;
    
    // if the owner is cloaked, don't spawn any particles
    if (owner.cloakAlpha &lt; 0.5) exit;
    
    pos = getWeaponPosition();
    
    // if the plasma rifle is in cooldown and not sheathed
    if (alarm[10] &gt; -1) &amp;&amp; (pos != 0) {
        // figure out which frame is being drawn
        if (maxHeat - alarm[10] &lt; 15) {
            // 3 frame lead-in
            tick = floor((maxHeat - alarm[10]) / 5);
        } else if (maxHeat - alarm[10] &lt; maxHeat - 25) {
            // cycle the hot hand
            tick = 2 + (floor((maxHeat - alarm[10] - 15) / 3) mod 4);
        } else {
            // lead-out
            tick = 5 + min(floor((25 - alarm[10]) / 5), 2);
        }
        
        // depending on which tick it is, the particles are in different places
        if (tick == 0) {
            px = 13 * image_xscale;
            py = -8;
        } else if (tick &lt; 6) {
            px = 6 * image_xscale;
            py = -13;
        } else {
            // don't spawn anything
            exit;
        }
        
        // figure out where the spawn point for the smoke particles would be
        switch (pos) {
            case 1:
                px += x + xoffset * image_xscale;
                py += y + yoffset;
                break;
                
            case 2:
                px += x + (xoffset + xoffsetDW) * image_xscale;
                py += y + yoffset + yoffsetDW;
                break;
        }
        
        // move the emitter and spawn smoke based on remaining heat
        part_emitter_region(global.weaponPS, smokeEM, px - 1, px + 1, py - 1, py + 1, ps_shape_ellipse, ps_distr_gaussian);
        part_emitter_burst(global.weaponPS, smokeEM, global.plasmaRifleSmokePT, heat / 30);
    }
}
</argument>
      </arguments>
    </action>
    <action id="604" library="1">
      <!--action name: Inherited-->
      <kind>NORMAL</kind>
      <allowRelative>false</allowRelative>
      <question>false</question>
      <canApplyTo>false</canApplyTo>
      <actionType>FUNCTION</actionType>
      <functionName>action_inherited</functionName>
      <relative>false</relative>
      <not>false</not>
      <appliesTo>.self</appliesTo>
      <arguments/>
    </action>
  </actions>
</event>
