<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<event category="DRAW" id="0">
  <actions>
    <action id="604" library="1">
      <!--action name: Inherited-->
      <kind>NORMAL</kind>
      <allowRelative>false</allowRelative>
      <question>false</question>
      <canApplyTo>false</canApplyTo>
      <actionType>FUNCTION</actionType>
      <functionName>action_inherited</functionName>
      <relative>false</relative>
      <not>false</not>
      <appliesTo>.self</appliesTo>
      <arguments/>
    </action>
    <action id="603" library="1">
      <!--action name: Code-->
      <kind>CODE</kind>
      <allowRelative>false</allowRelative>
      <question>false</question>
      <canApplyTo>true</canApplyTo>
      <actionType>CODE</actionType>
      <functionName/>
      <relative>false</relative>
      <not>false</not>
      <appliesTo>.self</appliesTo>
      <arguments>
        <argument kind="STRING">{
    // laser effect drawing
    if (drawShot) {
        drawShot = false;
        
        // create the proper particles
        // always spawn the trail
        part_particles_create(global.weaponPS, (shotx + shotx2) / 2, (shoty + shoty2) / 2, trailPT, 1);
        part_particles_create(global.weaponPS, (shotx + shotx2) / 2, (shoty + shoty2) / 2, corePT, 1);
    }
    
    // Targeting laser drawing
    // Only drawn when charge is &gt; 0
    if (chargeLevel &gt; 0) {
        // perform the collision check -- this may be expensive, so maybe we'll have an option to hide it
        var theta;
        theta = image_angle;
        if (image_xscale &lt; 0) theta -= 180;
        weaponShotPoint();
        hitscanCollision(shotx, shoty, theta, maxRange, true);
        
        draw_set_alpha(0.52);
        draw_line_width_color(shotx, shoty, shotx2, shoty2, 1, make_color_rgb(255, 100, 100), make_color_rgb(255, 100, 100));
    }
}
</argument>
      </arguments>
    </action>
  </actions>
</event>
