<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<event category="STEP" id="0">
  <actions>
    <action id="603" library="1">
      <!--action name: Code-->
      <kind>CODE</kind>
      <allowRelative>false</allowRelative>
      <question>false</question>
      <canApplyTo>true</canApplyTo>
      <actionType>CODE</actionType>
      <functionName/>
      <relative>false</relative>
      <not>false</not>
      <appliesTo>.self</appliesTo>
      <arguments>
        <argument kind="STRING">stepHasRun = true;
if(editing != -1) {
    switch (item_type[editing]) {
        case "edittext2":
        case "edittext":
        case "editnum":
        case "editpass":
            item_value[editing] = keyboard_string;
            break;
        case "editkeyormouse":
            if mouse_check_button(mb_left) {
                menu_set_var(editing, MOUSE_LEFT);
                execute_string(item_script[editing], MOUSE_LEFT);
                editing = -1;
                exit;
            } else if mouse_check_button(mb_right) {
                menu_set_var(editing, MOUSE_RIGHT);
                execute_string(item_script[editing], MOUSE_RIGHT);
                editing = -1;
                exit;
            } else if mouse_check_button(mb_middle) {
                menu_set_var(editing, MOUSE_MIDDLE);
                execute_string(item_script[editing], MOUSE_MIDDLE);
                editing = -1;
                exit;
            }
        case "editkey":
            if keyboard_check_direct(vk_tab) keyboard_lastkey = vk_tab;
            if keyboard_lastkey != 0 {
                menu_set_var(editing, keyboard_lastkey);
                execute_string(item_script[editing], menu_get_var(editing));
                editing = -1;
                exit;
            }
    }
} else if(mouse_x &gt; view_xview[0]+xbegin and mouse_x &lt; view_xview[0]+xbegin+width) {
    virtualitem = round((mouse_y-(view_yview[0]+ybegin))/spacing);
    if(mouse_check_button_pressed(mb_left)){
        mouse_clear(mb_left);
        if(virtualitem &gt;= 0 and virtualitem &lt; items) {
            switch (item_type[virtualitem]) {
                case "script":
                    execute_string(item_script[virtualitem]);
                    break;
                case "editkey":
                case "editkeyormouse":
                    io_clear();
                    editing = virtualitem;
                    break;
                case "edittext":
                case "edittext2":
                case "editnum":
                case "editpass":
                    keyboard_string = "";
                    editing = virtualitem;
                    break;
                case "editselect":
                    item_value[virtualitem] = (item_value[virtualitem]+1) mod item_options[virtualitem];
                    menu_set_var(virtualitem, item_option_value[virtualitem, item_value[virtualitem]]);
                    execute_string(item_script[virtualitem], menu_get_var(virtualitem));
                    break;
            }
        }
    }
} else {
    virtualitem = -1;
}
// --- MOD CODE ---
// update the menu items to reflect any changes to their linked variables
// this is mostly just used on the Achievements menu
var i, j;
for (i = 0; i &lt; items; i += 1) {
    switch (item_type[i]) {
        case "editselect":
            for (j = 0; j &lt; item_options[i]; j += 1) {
                if (menu_get_var(i) == item_option_value[i, j]) {
                    item_value[i] = j;
                    break;
                }
            }
            break;
    }
}
</argument>
      </arguments>
    </action>
  </actions>
</event>
