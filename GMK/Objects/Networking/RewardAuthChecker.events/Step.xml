<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<event category="STEP" id="0">
  <actions>
    <action id="603" library="1">
      <!--action name: Code-->
      <kind>CODE</kind>
      <allowRelative>false</allowRelative>
      <question>false</question>
      <canApplyTo>true</canApplyTo>
      <actionType>CODE</actionType>
      <functionName/>
      <relative>false</relative>
      <not>false</not>
      <appliesTo>.self</appliesTo>
      <arguments>
        <argument kind="STRING">if(!socket)
{
    if(ds_queue_empty(workQueue))
    {
        // Out of work, let's make like a tree before more arrives
        instance_destroy();
        exit;
    }
    
    // pop (and clean up) the next work item
    var item, authbuffer;
    item = ds_queue_dequeue(workQueue);
    currentPlayer = ds_list_find_value(item, 0);
    authbuffer = ds_list_find_value(item, 1);
    ds_list_destroy(item);
    
    // start the next auth check
    socket = tcp_connect(AUTH_SERVER_HOST, AUTH_SERVER_PORT);
    write_buffer(socket, authbuffer);
    buffer_destroy(authbuffer);
    socket_send(socket);
}
else if(!tcp_eof(socket))
{
    tcp_receive_available(socket);
    write_buffer(responseBuffer, socket);
}
else
{
    if(!socket_has_error(socket) and instance_exists(currentPlayer) and buffer_size(responseBuffer)&gt;0)
    {
        var rewards;
        rewards = read_string(responseBuffer, buffer_size(responseBuffer));
        rewardAuthSuccess(currentPlayer, rewards);
    }
    
    socket_destroy(socket);
    socket = 0;
    currentPlayer = noone;
    buffer_clear(responseBuffer);
}
</argument>
      </arguments>
    </action>
  </actions>
</event>
